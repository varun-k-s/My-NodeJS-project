<%- include('partials/header'); -%>

<form>
  <h2>Sign up</h2>
  <label for="email">Email</label>
  <input type="text" name="email" required />
  <div class="email error"></div>
  <label for="password">Password</label>
  <input type="password" name="password" required />
  <div class="password error"></div>
  <button>Sign up</button>
</form>


<script>
  const form = document.querySelector('form');
  // .email.error will refer to the div with class name containing both the words 'error' and 'email'.
  const emailError = document.querySelector('.email.error');
  const passwordError = document.querySelector('.password.error');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    //reset errors
    emailError.textContent = '';
    passwordError.textContent = '';

    // get values
    const email = form.email.value;
    const password = form.password.value;

    try {
        const res = await fetch('/signup', {
            method: 'POST',
            body: JSON.stringify({email, password}),
            headers: { 'Content-Type': 'application/json'}
        })

        // json parsing is asynchronous and takes time, so .json() will return a Promise.
        // So, we should use await for res.json() as shown below.
        
        const data = await res.json();
        console.log("Here is the response I got from the server after POST-ing the signup data you entered:");
        console.log(data);
        if (data.errors) {
            emailError.textContent = data.errors.email;
            passwordError.textContent = data.errors.password;
        }
        if (data.user) {
            location.assign('/');
        }
    }
    catch (err) {
        // this is for catching any error associated with the endpoint during the fetch.
        console.log(err);
    }
  });
</script>

<%- include('partials/footer'); -%>